
  xorl %ecx, %ecx
  movq $source, %rbx
  movq $destination, %rdx

checkcorrectness:
  #num has to divide 4
  movl (%rdx,%rcx,4), %r8d
  cmpl (%rbx,%rcx,4), %r8d
  jne bad_exit
  incl %ecx
  movl num, %r9d
  shrl $2, %r9d
  cmpl %r9d, %ecx
  jne checkcorrectness
  
  #checks first int
  movl $0, %ecx
  movq $destination, %rdx
  movl (%rdx,%rcx,4), %r8d
  cmpl $6, %r8d
  jne bad_exit
  
  #checks second int
  movl $1, %ecx
  movq $destination, %rdx
  movl (%rdx,%rcx,4), %r8d
  cmpl $12, %r8d
  jne bad_exit
  
  #checks third int
  movl $2, %ecx
  movq $destination, %rdx
  movl (%rdx,%rcx,4), %r8d
  cmpl $9, %r8d
  jne bad_exit
  
  #checks fourth int
  movl $3, %ecx
  movq $destination, %rdx
  movl (%rdx,%rcx,4), %r8d
  cmpl $8, %r8d
  jne bad_exit

  movq $60, %rax
  movq $0, %rdi
  syscall

bad_exit:
  movq $60, %rax
  movq $1, %rdi
  syscall

.section .data
source: .int 6,12,9,8
destination: .int 1,2,3,4 # expected: .int 6,12,9,8
num: .int 16
